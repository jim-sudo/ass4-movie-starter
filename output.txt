Mon May 27 01:44:41 PDT 2024
Linux csslab12 4.18.0-513.18.1.el8_9.x86_64 #1 SMP Wed Feb 21 21:34:36 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux
uid=1445303(jeosburn) gid=2121445303(jeosburn) groups=2121445303(jeosburn),605559(lab-access)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
=====================================
Start testStoreFinal
Error parsing line: F, 10, Nora Ephron, Sleepless in Seattle, 1993
std::bad_alloc
Error parsing line: D, 10, Barry Levinson, Good Morning Vietnam, 1988
std::bad_alloc
Error parsing line: D, 10, Barry Levinson, Same Director Good Morning Vietnam, 1988
std::bad_alloc
Error parsing line: D, 10, Gus Van Sant, Good Will Hunting, 2000
std::bad_alloc
Error parsing line: F, 10, Rob Reiner, When Harry Met Sally, 1989
std::bad_alloc
Error parsing line: D, 10, Phillippe De Broca, King of Hearts, 1967
std::bad_alloc
Error parsing line: D, 10, Steven Spielberg, Schindler's List, 1993
std::bad_alloc
Error parsing line: F, 10, Gore Verbinski, Pirates of the Caribbean, 2003
std::bad_alloc
Error parsing line: F, 10, Different Years, Pirates of the Caribbean, 2000
std::bad_alloc
Invalid movie type: Z
Invalid movie type: Z
Error parsing line: F, 10, John Landis, National Lampoon's Animal House, 1978
std::bad_alloc


=================Prinitng inventory==================

===== Comedy Movies =====

Title: Annie Hall
Director: Woody Allen
Release Year: 1977
Borrowed: 0
Available in Stock: 10

Title: Fargo
Director: Joel Coen
Release Year: 1996
Borrowed: 0
Available in Stock: 10

Title: You've Got Mail
Director: Nora Ephron
Release Year: 1998
Borrowed: 0
Available in Stock: 10


===== Drama Movies =====

Title: Unforgiven
Director: Clint Eastwood
Release Year: 1992
Borrowed: 0
Available in Stock: 10

Title: Silence of the Lambs
Director: Jonathan Demme
Release Year: 1991
Borrowed: 0
Available in Stock: 10

Title: Dogfight
Director: Nancy Savoca
Release Year: 1991
Borrowed: 0
Available in Stock: 10


===== Classic Movies =====

Title: Holiday
Director: George Cukor
Major Actor: Cary Grant
Release Date: 9 1938
Borrowed: 0
Available in Stock: 10

Title: Holiday
Director: George Cukor
Major Actor: Katherine Hepburn
Release Date: 9 1938
Borrowed: 0
Available in Stock: 10

Title: Gone With the Wind
Director: Victor Fleming
Major Actor: Clark Gable
Release Date: 2 1939
Borrowed: 0
Available in Stock: 10

Title: Gone With the Wind
Director: Victor Fleming
Major Actor: Vivien Leigh
Release Date: 2 1939
Borrowed: 0
Available in Stock: 10

Title: The Wizard of Oz
Director: Victor Fleming
Major Actor: Judy Garland
Release Date: 7 1939
Borrowed: 0
Available in Stock: 10

Title: The Philadelphia Story
Director: George Cukor
Major Actor: Cary Grant
Release Date: 5 1940
Borrowed: 0
Available in Stock: 10

Title: The Philadelphia Story
Director: George Cukor
Major Actor: Katherine Hepburn
Release Date: 5 1940
Borrowed: 0
Available in Stock: 10

Title: The Maltese Falcon
Director: John Huston
Major Actor: Humphrey Bogart
Release Date: 10 1941
Borrowed: 0
Available in Stock: 10

Title: Casablanca
Director: Michael Curtiz
Major Actor: Humphrey Bogart
Release Date: 8 1942
Borrowed: 0
Available in Stock: 10

Title: Casablanca
Director: Michael Curtiz
Major Actor: Ingrid Bergman
Release Date: 8 1942
Borrowed: 0
Available in Stock: 10

Title: It's a Wonderful Life
Director: Frank Capra
Major Actor: Donna Reed
Release Date: 11 1946
Borrowed: 0
Available in Stock: 10

Title: It's a Wonderful Life
Director: Frank Capra
Major Actor: James Steward
Release Date: 11 1946
Borrowed: 0
Available in Stock: 10

Title: A Clockwork Orange
Director: Stanley Kubrick
Major Actor: Malcolm McDowell
Release Date: 2 1971
Borrowed: 0
Available in Stock: 10

Title: Harold and Maude
Director: Hal Ashby
Major Actor: Ruth Gordon
Release Date: 3 1971
Borrowed: 0
Available in Stock: 10


History for customer 1000:

** No transactions found **

History for customer 5000:

** No transactions found **

History for customer 8000:

** No transactions found **
Movie not found: D Barry Levinson, Good Morning Vietnam,
Error: Could not borrow movie: D Barry Levinson, Good Morning Vietnam,
Movie not found: F Sleepless in Seattle, 1993
Error: Could not borrow movie: F Sleepless in Seattle, 1993
Invalid movie type: Z
Error: Could not borrow movie: Z 2 1971 Malcolm McDowell
Movie not found: D Gus Van Sant, Good Will Hunting,
Error: Could not borrow movie: D Gus Van Sant, Good Will Hunting,
Movie not found: D Phillippe De Broca, King of Hearts,
Error: Could not borrow movie: D Phillippe De Broca, King of Hearts,
Movie not found: F When Harry Met Sally, 1989
Error: Could not borrow movie: F When Harry Met Sally, 1989
Movie not found: D Jonathan Demme, Silence of the Lambs,
Error: Could not borrow movie: D Jonathan Demme, Silence of the Lambs,
Invalid command: X
Movie not found: D Nancy Savoca, Dogfight,
Error: Could not borrow movie: D Nancy Savoca, Dogfight,
Movie not found: D Steven Spielberg, Schindler's List,
Error: Could not borrow movie: D Steven Spielberg, Schindler's List,
Invalid command: Z
Movie not found: F National Lampoon's Animal House, 1978
Error: Could not borrow movie: F National Lampoon's Animal House, 1978
Movie not found: D Nancy Savoca, Dogfight,
Error: Could not borrow movie: D Nancy Savoca, Dogfight,
Movie not found: D Clint Eastwood, Unforgiven,
Error: Could not borrow movie: D Clint Eastwood, Unforgiven,
Error: Customer ID 1234 not found.
Movie not found: F Bogus Title, 2001
Error: Could not borrow movie: F Bogus Title, 2001
Error: Could not borrow movie: C 3 1971 Ruth Gordon
Error: Could not borrow movie: C 3 1971 Ruth Gordon
Error: Could not borrow movie: C 3 1971 Ruth Gordon
Movie not found: D Steven Spielberg, Bogus Title,
Error: Could not borrow movie: D Steven Spielberg, Bogus Title,

=================Prinitng inventory==================

===== Comedy Movies =====

Title: Annie Hall
Director: Woody Allen
Release Year: 1977
Borrowed: 1
Available in Stock: 9

Title: Fargo
Director: Joel Coen
Release Year: 1996
Borrowed: 2
Available in Stock: 8

Title: You've Got Mail
Director: Nora Ephron
Release Year: 1998
Borrowed: 1
Available in Stock: 9


===== Drama Movies =====

Title: Unforgiven
Director: Clint Eastwood
Release Year: 1992
Borrowed: 0
Available in Stock: 10

Title: Silence of the Lambs
Director: Jonathan Demme
Release Year: 1991
Borrowed: 0
Available in Stock: 10

Title: Dogfight
Director: Nancy Savoca
Release Year: 1991
Borrowed: 0
Available in Stock: 10


===== Classic Movies =====

Title: Holiday
Director: George Cukor
Major Actor: Cary Grant
Release Date: 9 1938
Borrowed: 1
Available in Stock: 9

Title: Holiday
Director: George Cukor
Major Actor: Katherine Hepburn
Release Date: 9 1938
Borrowed: 0
Available in Stock: 10

Title: Gone With the Wind
Director: Victor Fleming
Major Actor: Clark Gable
Release Date: 2 1939
Borrowed: 0
Available in Stock: 10

Title: Gone With the Wind
Director: Victor Fleming
Major Actor: Vivien Leigh
Release Date: 2 1939
Borrowed: 0
Available in Stock: 10

Title: The Wizard of Oz
Director: Victor Fleming
Major Actor: Judy Garland
Release Date: 7 1939
Borrowed: 0
Available in Stock: 10

Title: The Philadelphia Story
Director: George Cukor
Major Actor: Cary Grant
Release Date: 5 1940
Borrowed: 1
Available in Stock: 9

Title: The Philadelphia Story
Director: George Cukor
Major Actor: Katherine Hepburn
Release Date: 5 1940
Borrowed: 1
Available in Stock: 9

Title: The Maltese Falcon
Director: John Huston
Major Actor: Humphrey Bogart
Release Date: 10 1941
Borrowed: 1
Available in Stock: 9

Title: Casablanca
Director: Michael Curtiz
Major Actor: Humphrey Bogart
Release Date: 8 1942
Borrowed: 0
Available in Stock: 10

Title: Casablanca
Director: Michael Curtiz
Major Actor: Ingrid Bergman
Release Date: 8 1942
Borrowed: 0
Available in Stock: 10

Title: It's a Wonderful Life
Director: Frank Capra
Major Actor: Donna Reed
Release Date: 11 1946
Borrowed: 0
Available in Stock: 10

Title: It's a Wonderful Life
Director: Frank Capra
Major Actor: James Steward
Release Date: 11 1946
Borrowed: 0
Available in Stock: 10

Title: A Clockwork Orange
Director: Stanley Kubrick
Major Actor: Malcolm McDowell
Release Date: 2 1971
Borrowed: 1
Available in Stock: 9

Title: Harold and Maude
Director: Hal Ashby
Major Actor: Ruth Gordon
Release Date: 3 1971
Borrowed: 10
Available in Stock: 0


History for customer 1000:

Borrowed: F Fargo, 1996
Borrowed: C 3 1971 Ruth Gordon
Borrowed: C 5 1940 Cary Grant
Borrowed: C 5 1940 Katherine Hepburn

History for customer 1111:

Borrowed: C 9 1938 Cary Grant
Borrowed: C 10 1941 Humphrey Bogart
Borrowed: C 3 1971 Ruth Gordon
Borrowed: C 2 1971 Malcolm McDowell

History for customer 5000:

Borrowed: C 3 1971 Ruth Gordon
Returned: C 3 1971 Ruth Gordon
Borrowed: C 3 1971 Ruth Gordon
Returned: C 3 1971 Ruth Gordon
Borrowed: C 3 1971 Ruth Gordon
Returned: C 3 1971 Ruth Gordon
Borrowed: C 3 1971 Ruth Gordon

History for customer 8000:

Borrowed: C 3 1971 Ruth Gordon
Borrowed: C 3 1971 Ruth Gordon
Returned: F You've Got Mail, 1998
Borrowed: F You've Got Mail, 1998

History for customer 8888:

Borrowed: C 3 1971 Ruth Gordon
Borrowed: F Annie Hall, 1977
End testStoreFinal
=====================================
Done.
=====================================================
3. clang-tidy warnings are fixed
=====================================================
15678 warnings generated.
31356 warnings generated.
43960 warnings generated.
56566 warnings generated.
72244 warnings generated.
92135 warnings generated.
103438 warnings generated.
119176 warnings generated.
139027 warnings generated.
160606 warnings generated.
Suppressed 160606 warnings (160606 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./classic.cpp
4c4,5
< Classic::Classic(const string& release_date, const string& major_actor, const string& title, int stock, const string& director)
---
> Classic::Classic(const string &release_date, const string &major_actor,
>                  const string &title, int stock, const string &director)
6,29c7,26
<     this->title_ = title;
<     this->stock_ = stock;
<     this->current_stock_ = stock;
<     this->director_ = director;
<     this->genre_ = 'C';
< }
< 
< bool Classic::operator<(const Movie& other) const {
<     const auto classic = static_cast<const Classic&>(other);
<     if (release_date_ != classic.release_date_) {
<         istringstream ssa(release_date_);
<         istringstream ssb(classic.release_date_);
<         int month_a;
<         int year_a;
<         int month_b;
<         int year_b;
<         ssa >> month_a >> year_a;
<         ssb >> month_b >> year_b;
<         if (year_a != year_b) {
<             return year_a < year_b;
<         }
<         if (month_a != month_b) {
<             return month_a < month_b;
<         }
---
>   this->title_ = title;
>   this->stock_ = stock;
>   this->current_stock_ = stock;
>   this->director_ = director;
>   this->genre_ = 'C';
> }
> 
> bool Classic::operator<(const Movie &other) const {
>   const auto classic = static_cast<const Classic &>(other);
>   if (release_date_ != classic.release_date_) {
>     istringstream ssa(release_date_);
>     istringstream ssb(classic.release_date_);
>     int month_a;
>     int year_a;
>     int month_b;
>     int year_b;
>     ssa >> month_a >> year_a;
>     ssb >> month_b >> year_b;
>     if (year_a != year_b) {
>       return year_a < year_b;
31,36c28,32
<     return major_actor_ < classic.major_actor_;
< }
< 
< bool Classic::operator==(const Movie& other) const {
<     const auto classic = static_cast<const Classic&>(other);
<     return release_date_ == classic.release_date_ && major_actor_ == classic.major_actor_;
---
>     if (month_a != month_b) {
>       return month_a < month_b;
>     }
>   }
>   return major_actor_ < classic.major_actor_;
39,46c35,48
< ostream& Classic::Print(ostream& out) const {
<     out << "Title: " << title_ << '\n';
<     out << "Director: " <<director_ << '\n';
<     out << "Major Actor: " << major_actor_<< '\n';
<     out << "Release Date: " << release_date_<< '\n';
<     out << "Borrowed: " << current_stock_ - stock_<< '\n';
<     out << "Available in Stock: " << stock_<< '\n';
<     return out;
---
> bool Classic::operator==(const Movie &other) const {
>   const auto classic = static_cast<const Classic &>(other);
>   return release_date_ == classic.release_date_ &&
>          major_actor_ == classic.major_actor_;
> }
> 
> ostream &Classic::Print(ostream &out) const {
>   out << "Title: " << title_ << '\n';
>   out << "Director: " << director_ << '\n';
>   out << "Major Actor: " << major_actor_ << '\n';
>   out << "Release Date: " << release_date_ << '\n';
>   out << "Borrowed: " << current_stock_ - stock_ << '\n';
>   out << "Available in Stock: " << stock_ << '\n';
>   return out;
50c52,53
<     return std::to_string(stock_) + ", " + director_ + ", " + title_ + ", " + major_actor_ + " " + release_date_;
---
>   return std::to_string(stock_) + ", " + director_ + ", " + title_ + ", " +
>          major_actor_ + " " + release_date_;
53,55c56
< string Classic::getReleaseDate() const {
<     return release_date_;
< }
---
> string Classic::getReleaseDate() const { return release_date_; }
57,59c58
< void Classic::setReleaseDate(const string& date) {
<     release_date_ = date;
< }
---
> void Classic::setReleaseDate(const string &date) { release_date_ = date; }
61,63c60
< string Classic::getMajorActor() const {
<     return major_actor_;
< }
---
> string Classic::getMajorActor() const { return major_actor_; }
65,67c62,72
< void Classic::setMajorActor(const string& actor) {
<     major_actor_ = actor;
< }
---
> void Classic::setMajorActor(const string &actor) { major_actor_ = actor; }
> 
> Movie *ClassicFactory::Create(const string &line) const {
>   istringstream ss(line);
>   int stock;
>   string director;
>   string title;
>   string major_actor_first;
>   string major_actor_last;
>   int release_month;
>   int release_year;
69,85c74,80
< Movie* ClassicFactory::Create(const string& line) const {
<     istringstream ss(line);
<     int stock;
<     string director;
<     string title;
<     string major_actor_first;
<     string major_actor_last;
<     int release_month;
<     int release_year;
< 
<     ss >> stock;
<     ss.ignore(2);
<     getline(ss, director, ',');
<     ss.ignore(1); 
<     getline(ss, title, ',');
<     ss.ignore(1); 
<     ss >> major_actor_first >> major_actor_last >> release_month >> release_year;
---
>   ss >> stock;
>   ss.ignore(2);
>   getline(ss, director, ',');
>   ss.ignore(1);
>   getline(ss, title, ',');
>   ss.ignore(1);
>   ss >> major_actor_first >> major_actor_last >> release_month >> release_year;
87,88c82,84
<     string major_actor = major_actor_first + " " + major_actor_last;
<     string release_date = to_string(release_month) + " " + to_string(release_year);
---
>   string major_actor = major_actor_first + " " + major_actor_last;
>   string release_date =
>       to_string(release_month) + " " + to_string(release_year);
90c86
<     return new Classic(release_date, major_actor, title, stock, director);
---
>   return new Classic(release_date, major_actor, title, stock, director);
Running clang-format on ./comedy.cpp
5c5,6
< Comedy::Comedy(const string& title, int stock, const string& director, int release_year)
---
> Comedy::Comedy(const string &title, int stock, const string &director,
>                int release_year)
7,34c8,37
<     this->title_ = title;
<     this->stock_ = stock;
<     this->current_stock_ = stock;
<     this->director_ = director;
<     this->genre_ = 'F';
< }
< 
< bool Comedy::operator<(const Movie& other) const {
<     const auto comedy = static_cast<const Comedy&>(other);
<     if (title_ != comedy.title_) {
<         return title_ < comedy.title_;
<     }
<     return release_year_ < comedy.release_year_;
< }
< 
< bool Comedy::operator==(const Movie& other) const {
<     const auto comedy = static_cast<const Comedy&>(other);
<     return title_ == comedy.title_ && release_year_ == comedy.release_year_;
< }
< 
< ostream& Comedy::Print(ostream& out) const {
<     out << "Title: " << title_ << '\n';
<     out << "Director: " <<director_ << '\n';
<     out << "Release Year: " << release_year_<< '\n';
<     out << "Borrowed: " << current_stock_ - stock_<< '\n';
<     out << "Available in Stock: " << stock_<< '\n';
<     //out << "Comedy: " << title_ << ", " << release_year_ << ", " << director_ <<  "\n" << "[Overall stock: ]" << current_stock_  << " , avaliable:  "<< stock_ << " ] \n";
<     return out;
---
>   this->title_ = title;
>   this->stock_ = stock;
>   this->current_stock_ = stock;
>   this->director_ = director;
>   this->genre_ = 'F';
> }
> 
> bool Comedy::operator<(const Movie &other) const {
>   const auto comedy = static_cast<const Comedy &>(other);
>   if (title_ != comedy.title_) {
>     return title_ < comedy.title_;
>   }
>   return release_year_ < comedy.release_year_;
> }
> 
> bool Comedy::operator==(const Movie &other) const {
>   const auto comedy = static_cast<const Comedy &>(other);
>   return title_ == comedy.title_ && release_year_ == comedy.release_year_;
> }
> 
> ostream &Comedy::Print(ostream &out) const {
>   out << "Title: " << title_ << '\n';
>   out << "Director: " << director_ << '\n';
>   out << "Release Year: " << release_year_ << '\n';
>   out << "Borrowed: " << current_stock_ - stock_ << '\n';
>   out << "Available in Stock: " << stock_ << '\n';
>   // out << "Comedy: " << title_ << ", " << release_year_ << ", " << director_
>   // <<  "\n" << "[Overall stock: ]" << current_stock_  << " , avaliable:  "<<
>   // stock_ << " ] \n";
>   return out;
38c41,42
<     return std::to_string(stock_) + ", " + director_ + ", " + title_ + ", " + std::to_string(release_year_);
---
>   return std::to_string(stock_) + ", " + director_ + ", " + title_ + ", " +
>          std::to_string(release_year_);
41,43c45
< int Comedy::getReleaseYear() const {
<     return release_year_;
< }
---
> int Comedy::getReleaseYear() const { return release_year_; }
45,47c47
< void Comedy::setReleaseYear(int year) {
<     release_year_ = year;
< }
---
> void Comedy::setReleaseYear(int year) { release_year_ = year; }
49,51c49
< string Comedy::getDirector() const {
<     return director_;
< }
---
> string Comedy::getDirector() const { return director_; }
53,55c51,58
< void Comedy::setDirector(const string& director) {
<     this->director_ = director;
< }
---
> void Comedy::setDirector(const string &director) { this->director_ = director; }
> 
> Movie *ComedyFactory::Create(const string &line) const {
>   istringstream ss(line);
>   int stock;
>   string director;
>   string title;
>   int release_year;
57,70c60,66
< Movie* ComedyFactory::Create(const string& line) const {
<     istringstream ss(line);
<     int stock;
<     string director;
<     string title;
<     int release_year;
< 
<     ss >> stock;
<     ss.ignore(2); 
<     getline(ss, director, ',');
<     ss.ignore(1); 
<     getline(ss, title, ',');
<     ss.ignore(1);
<     ss >> release_year;
---
>   ss >> stock;
>   ss.ignore(2);
>   getline(ss, director, ',');
>   ss.ignore(1);
>   getline(ss, title, ',');
>   ss.ignore(1);
>   ss >> release_year;
72c68
<     return new Comedy(title, stock, director, release_year);
---
>   return new Comedy(title, stock, director, release_year);
Running clang-format on ./customer.cpp
0a1
> #include "customer.h"
3,4d3
< #include "customer.h"
< 
8,9c7,8
< Customer::Customer(int &id, string &last_name, string &first_name) 
< : id_(id), last_name_(last_name), first_name_(first_name) { }
---
> Customer::Customer(int &id, string &last_name, string &first_name)
>     : id_(id), last_name_(last_name), first_name_(first_name) {}
11,13c10
< int Customer::ID() const {
<     return id_;
< }
---
> int Customer::ID() const { return id_; }
15,17c12
< string Customer::LastName() const {
<     return last_name_;
< }
---
> string Customer::LastName() const { return last_name_; }
19,21c14
< string Customer::FirstName() const {
<     return first_name_;
< }
---
> string Customer::FirstName() const { return first_name_; }
23,25c16
< void Customer::SetID(int id) {
<     id_ = id;
< }
---
> void Customer::SetID(int id) { id_ = id; }
27,29c18
< void Customer::SetLastName(string last_name) {
<     last_name_ = last_name;
< }
---
> void Customer::SetLastName(string last_name) { last_name_ = last_name; }
31,33c20
< void Customer::SetFirstName(string first_name) {
<     first_name_ = first_name;
< }
---
> void Customer::SetFirstName(string first_name) { first_name_ = first_name; }
36,37c23,24
<     history_.push_back(history);
<     return true;
---
>   history_.push_back(history);
>   return true;
41,50c28,35
<     if (history_.empty()) {
<         std::cout << "** No transactions found **" << std::endl;
<     } else {
<         // for (const auto& transaction : history_) {
<         //     std::cout << transaction << std::endl;
<         // }
<         for (auto it = history_.rbegin(); it != history_.rend(); ++it) {
<             std::cout << *it << std::endl;
<         }
< 
---
>   if (history_.empty()) {
>     std::cout << "** No transactions found **" << std::endl;
>   } else {
>     // for (const auto& transaction : history_) {
>     //     std::cout << transaction << std::endl;
>     // }
>     for (auto it = history_.rbegin(); it != history_.rend(); ++it) {
>       std::cout << *it << std::endl;
51a37
>   }
55c41,42
<     return id_ == customer.id_ && last_name_ == customer.last_name_ && first_name_ == customer.first_name_;
---
>   return id_ == customer.id_ && last_name_ == customer.last_name_ &&
>          first_name_ == customer.first_name_;
58,60c45,47
< ostream& operator<<(ostream& os, const Customer& customer) {
<   os << "Customer ID: " << customer.ID()
<      << ", Name: " << customer.FirstName() << " " << customer.LastName();
---
> ostream &operator<<(ostream &os, const Customer &customer) {
>   os << "Customer ID: " << customer.ID() << ", Name: " << customer.FirstName()
>      << " " << customer.LastName();
Running clang-format on ./customerHashTable.cpp
1d0
< #include "customer.h"
3c2
< 
---
> #include "customer.h"
6,10c5,9
<     table = new Customer[TABLE_SIZE];
<     occupied = new bool[TABLE_SIZE];
<     for (int i = 0; i < TABLE_SIZE; i++) {
<         occupied[i] = false;
<     }
---
>   table = new Customer[TABLE_SIZE];
>   occupied = new bool[TABLE_SIZE];
>   for (int i = 0; i < TABLE_SIZE; i++) {
>     occupied[i] = false;
>   }
14,15c13,14
<     delete[] table;
<     delete[] occupied;
---
>   delete[] table;
>   delete[] occupied;
18,20c17
< int CustomerHashTable::hashFunction(int key) {
<     return key % TABLE_SIZE;
< }
---
> int CustomerHashTable::hashFunction(int key) { return key % TABLE_SIZE; }
23c20
<     return (hashFunction(key) + i * i) % TABLE_SIZE;
---
>   return (hashFunction(key) + i * i) % TABLE_SIZE;
27,33c24,29
<     for (int i = 0; i < TABLE_SIZE; i++) {
<         int idx = probe(customer.ID(), i);
<         if (!occupied[idx]) {
<             table[idx] = customer;
<             occupied[idx] = true;
<             return true;
<         }
---
>   for (int i = 0; i < TABLE_SIZE; i++) {
>     int idx = probe(customer.ID(), i);
>     if (!occupied[idx]) {
>       table[idx] = customer;
>       occupied[idx] = true;
>       return true;
35c31,32
<     return false; // table is full
---
>   }
>   return false; // table is full
39,43c36,39
<     for (int i = 0; i < TABLE_SIZE; i++) {
<         int idx = probe(id, i);
<         if (occupied[idx] && table[idx].ID() == id) {
<             return true;                //key found
<         }
---
>   for (int i = 0; i < TABLE_SIZE; i++) {
>     int idx = probe(id, i);
>     if (occupied[idx] && table[idx].ID() == id) {
>       return true; // key found
45c41,42
<     return false; // full cycle and not found
---
>   }
>   return false; // full cycle and not found
48,53c45,49
< void CustomerHashTable::print() const{
<     for (int i = 0; i < TABLE_SIZE; i++) {
<         if (!table[i].FirstName().empty()) {
<             cout << "at index " << i << ": " << table[i] << endl;;
<         }
<         
---
> void CustomerHashTable::print() const {
>   for (int i = 0; i < TABLE_SIZE; i++) {
>     if (!table[i].FirstName().empty()) {
>       cout << "at index " << i << ": " << table[i] << endl;
>       ;
55c51,52
<     cout << endl;
---
>   }
>   cout << endl;
59,64c56,60
<     for (int i = 0; i < TABLE_SIZE; i++) {
<         int idx = probe(customer.ID(), i);
<         if (occupied[idx] && table[idx] == customer) {
<             occupied[idx] = false;
<             return true; // key removed
<         }
---
>   for (int i = 0; i < TABLE_SIZE; i++) {
>     int idx = probe(customer.ID(), i);
>     if (occupied[idx] && table[idx] == customer) {
>       occupied[idx] = false;
>       return true; // key removed
66c62,63
<     return false; // key not found after full probing
---
>   }
>   return false; // key not found after full probing
69c66
< Customer* CustomerHashTable::getCustomer(int id) {
---
> Customer *CustomerHashTable::getCustomer(int id) {
73c70
<       return &table[idx];  // Return a pointer to the found customer
---
>       return &table[idx]; // Return a pointer to the found customer
76c73
<   return nullptr;  // Full cycle and not found
---
>   return nullptr; // Full cycle and not found
Running clang-format on ./drama.cpp
4c4,5
< Drama::Drama(const string& director, const string& title, int stock, int release_year)
---
> Drama::Drama(const string &director, const string &title, int stock,
>              int release_year)
6,32c7,33
<     this->title_ = title;
<     this->stock_ = stock;
<     this->current_stock_ = stock;
<     this->director_ = director;
<     this->genre_ = 'D';
< }
< 
< bool Drama::operator<(const Movie& other) const {
<     const auto drama = static_cast<const Drama&>(other);
<     if (director_ != drama.director_) {
<         return director_ < drama.director_;
<     }
<     return title_ < drama.title_;
< }
< 
< bool Drama::operator==(const Movie& other) const {
<     const auto drama = static_cast<const Drama&>(other);
<     return director_ == drama.director_ && title_ == drama.title_;
< }
< 
< ostream& Drama::Print(ostream& out) const {
<     out << "Title: " << title_ << '\n';
<     out << "Director: " <<director_ << '\n';
<     out << "Release Year: " << release_year_<< '\n';
<     out << "Borrowed: " << current_stock_ - stock_<< '\n';
<     out << "Available in Stock: " << stock_<< '\n';
<     return out;
---
>   this->title_ = title;
>   this->stock_ = stock;
>   this->current_stock_ = stock;
>   this->director_ = director;
>   this->genre_ = 'D';
> }
> 
> bool Drama::operator<(const Movie &other) const {
>   const auto drama = static_cast<const Drama &>(other);
>   if (director_ != drama.director_) {
>     return director_ < drama.director_;
>   }
>   return title_ < drama.title_;
> }
> 
> bool Drama::operator==(const Movie &other) const {
>   const auto drama = static_cast<const Drama &>(other);
>   return director_ == drama.director_ && title_ == drama.title_;
> }
> 
> ostream &Drama::Print(ostream &out) const {
>   out << "Title: " << title_ << '\n';
>   out << "Director: " << director_ << '\n';
>   out << "Release Year: " << release_year_ << '\n';
>   out << "Borrowed: " << current_stock_ - stock_ << '\n';
>   out << "Available in Stock: " << stock_ << '\n';
>   return out;
36c37,38
<     return to_string(stock_) + ", " + director_ + ", " + title_ + ", " + to_string(release_year_);
---
>   return to_string(stock_) + ", " + director_ + ", " + title_ + ", " +
>          to_string(release_year_);
39,41c41
< int Drama::getReleaseYear() const {
<     return release_year_;
< }
---
> int Drama::getReleaseYear() const { return release_year_; }
43,45c43
< void Drama::setReleaseYear(int year) {
<     release_year_ = year;
< }
---
> void Drama::setReleaseYear(int year) { release_year_ = year; }
47,49c45
< string Drama::getDirector() const {
<     return director_;
< }
---
> string Drama::getDirector() const { return director_; }
51,53c47,54
< void Drama::setDirector(const string& director) {
<     this->director_ = director;
< }
---
> void Drama::setDirector(const string &director) { this->director_ = director; }
> 
> Movie *DramaFactory::Create(const string &line) const {
>   istringstream ss(line);
>   int stock;
>   string director;
>   string title;
>   int release_year;
55,68c56,62
< Movie* DramaFactory::Create(const string& line) const {
<     istringstream ss(line);
<     int stock;
<     string director;
<     string title;
<     int release_year;
< 
<     ss >> stock;
<     ss.ignore(2); 
<     getline(ss, director, ',');
<     ss.ignore(1); 
<     getline(ss, title, ',');
<     ss.ignore(1); 
<     ss >> release_year;
---
>   ss >> stock;
>   ss.ignore(2);
>   getline(ss, director, ',');
>   ss.ignore(1);
>   getline(ss, title, ',');
>   ss.ignore(1);
>   ss >> release_year;
70c64
<     return new Drama(director, title, stock, release_year);
---
>   return new Drama(director, title, stock, release_year);
Running clang-format on ./inventory.cpp
3,8c3,7
< void Inventory::AddMovieHelper(Movie* movie, int count) {
<     for (auto& m : movies_) {
<         if (*m == *movie) {
<             m->setStock(m->getStock() + count);
<             return;
<         }
---
> void Inventory::AddMovieHelper(Movie *movie, int count) {
>   for (auto &m : movies_) {
>     if (*m == *movie) {
>       m->setStock(m->getStock() + count);
>       return;
10,11c9,11
<     movie->setStock(count);
<     movies_.push_back(movie);
---
>   }
>   movie->setStock(count);
>   movies_.push_back(movie);
14,16c14,16
< void Inventory::AddMovie(const Movie& movie, int count) {
<     Movie* new_movie = Movie::Create(movie.getType(), movie.ToString());
<     AddMovieHelper(new_movie, count);
---
> void Inventory::AddMovie(const Movie &movie, int count) {
>   Movie *new_movie = Movie::Create(movie.getType(), movie.ToString());
>   AddMovieHelper(new_movie, count);
20c20
<     vector<Movie*> sorted_movies = movies_;
---
>   vector<Movie *> sorted_movies = movies_;
22,43c22,30
<     // Sort Comedy movies by title, then by release year
<     sort(sorted_movies.begin(), sorted_movies.end(), [](Movie* a, Movie* b) {
<         if (a->getType() == 'F' && b->getType() == 'F') {
<             const auto *const ca = static_cast<const Comedy*>(a);
<             const auto *const cb = static_cast<const Comedy*>(b);
<             if (ca->getTitle() != cb->getTitle()) {
<                 return ca->getTitle() < cb->getTitle();
<             }
<             return ca->getReleaseYear() < cb->getReleaseYear();
<         }
<         return a->getType() < b->getType();
<     });
<     cout << endl;
<     cout << "=================Prinitng inventory=================="<< endl;
<     cout << endl;
<     // Print Comedy movies
<     std::cout << "===== Comedy Movies =====" << std::endl;
<     cout << endl;
<     for (const auto& movie : sorted_movies) {
<         if (movie->getType() == 'F') {
<             cout << *movie << std::endl;
<         }
---
>   // Sort Comedy movies by title, then by release year
>   sort(sorted_movies.begin(), sorted_movies.end(), [](Movie *a, Movie *b) {
>     if (a->getType() == 'F' && b->getType() == 'F') {
>       const auto *const ca = static_cast<const Comedy *>(a);
>       const auto *const cb = static_cast<const Comedy *>(b);
>       if (ca->getTitle() != cb->getTitle()) {
>         return ca->getTitle() < cb->getTitle();
>       }
>       return ca->getReleaseYear() < cb->getReleaseYear();
45,58c32,58
<     cout << endl;
< 
<     // Sort Drama movies by director, then by title
<     sort(sorted_movies.begin(), sorted_movies.end(), [](Movie* a, Movie* b) {
<         if (a->getType() == 'D' && b->getType() == 'D') {
<             const auto *const da = static_cast<const Drama*>(a);
<             const auto *const db = static_cast<const Drama*>(b);
<             if (da->getDirector() != db->getDirector()) {
<                 return da->getDirector() < db->getDirector();
<             }
<             return da->getTitle() < db->getTitle();
<         }
<         return a->getType() < b->getType();
<     });
---
>     return a->getType() < b->getType();
>   });
>   cout << endl;
>   cout << "=================Prinitng inventory==================" << endl;
>   cout << endl;
>   // Print Comedy movies
>   std::cout << "===== Comedy Movies =====" << std::endl;
>   cout << endl;
>   for (const auto &movie : sorted_movies) {
>     if (movie->getType() == 'F') {
>       cout << *movie << std::endl;
>     }
>   }
>   cout << endl;
> 
>   // Sort Drama movies by director, then by title
>   sort(sorted_movies.begin(), sorted_movies.end(), [](Movie *a, Movie *b) {
>     if (a->getType() == 'D' && b->getType() == 'D') {
>       const auto *const da = static_cast<const Drama *>(a);
>       const auto *const db = static_cast<const Drama *>(b);
>       if (da->getDirector() != db->getDirector()) {
>         return da->getDirector() < db->getDirector();
>       }
>       return da->getTitle() < db->getTitle();
>     }
>     return a->getType() < b->getType();
>   });
60,66c60,65
<     // Print Drama movies
<     cout << "===== Drama Movies =====" << endl;
<     cout << endl;
<     for (const auto& movie : sorted_movies) {
<         if (movie->getType() == 'D') {
<             std::cout << *movie << endl;
<         }
---
>   // Print Drama movies
>   cout << "===== Drama Movies =====" << endl;
>   cout << endl;
>   for (const auto &movie : sorted_movies) {
>     if (movie->getType() == 'D') {
>       std::cout << *movie << endl;
68c67,68
<     cout << endl;
---
>   }
>   cout << endl;
70,71c70,71
<     // Sort Classic movies by release date (month and year), then by major actor
<     sort(sorted_movies.begin(), sorted_movies.end(), [](Movie* a, Movie* b) {
---
>   // Sort Classic movies by release date (month and year), then by major actor
>   sort(sorted_movies.begin(), sorted_movies.end(), [](Movie *a, Movie *b) {
73,89c73,89
<         const auto *const ca = static_cast<const Classic*>(a);
<         const auto *const cb = static_cast<const Classic*>(b);
<         istringstream ssa(ca->getReleaseDate());
<         istringstream ssb(cb->getReleaseDate());
<         int month_a;
<         int year_a;
<         int month_b;
<         int year_b;
<         ssa >> month_a >> year_a;
<         ssb >> month_b >> year_b;
<         if (year_a != year_b) {
<             return year_a < year_b;
<         }
<         if (month_a != month_b) {
<             return month_a < month_b;
<         }
<         return ca->getMajorActor() < cb->getMajorActor();
---
>       const auto *const ca = static_cast<const Classic *>(a);
>       const auto *const cb = static_cast<const Classic *>(b);
>       istringstream ssa(ca->getReleaseDate());
>       istringstream ssb(cb->getReleaseDate());
>       int month_a;
>       int year_a;
>       int month_b;
>       int year_b;
>       ssa >> month_a >> year_a;
>       ssb >> month_b >> year_b;
>       if (year_a != year_b) {
>         return year_a < year_b;
>       }
>       if (month_a != month_b) {
>         return month_a < month_b;
>       }
>       return ca->getMajorActor() < cb->getMajorActor();
92c92
< });
---
>   });
94,100c94,99
<     // Print Classic movies
<     std::cout << "===== Classic Movies =====" << std::endl;
<     cout << endl;
<     for (const auto& movie : sorted_movies) {
<         if (movie->getType() == 'C') {
<             std::cout << *movie << std::endl;
<         }
---
>   // Print Classic movies
>   std::cout << "===== Classic Movies =====" << std::endl;
>   cout << endl;
>   for (const auto &movie : sorted_movies) {
>     if (movie->getType() == 'C') {
>       std::cout << *movie << std::endl;
101a101
>   }
104c104
< bool Inventory::BorrowMovie(const std::string& movie_info) {
---
> bool Inventory::BorrowMovie(const std::string &movie_info) {
117c117
<     for (auto& movie : movies_) {
---
>     for (auto &movie : movies_) {
119c119
<         auto* comedy = static_cast<Comedy*>(movie);
---
>         auto *comedy = static_cast<Comedy *>(movie);
125,126c125
<             return false; // No stock available
<           
---
>           return false; // No stock available
139c138
<     for (auto& movie : movies_) {
---
>     for (auto &movie : movies_) {
141c140
<         auto* drama = static_cast<Drama*>(movie);
---
>         auto *drama = static_cast<Drama *>(movie);
147,148c146
<             return false; // No stock available
<           
---
>           return false; // No stock available
162c160
<     for (auto& movie : movies_) {
---
>     for (auto &movie : movies_) {
164,165c162,165
<         auto*  classic = static_cast<Classic*>(movie);
<         if (classic->getReleaseDate() == std::to_string(month) + " " + std::to_string(year) && classic->getMajorActor() == actor) {
---
>         auto *classic = static_cast<Classic *>(movie);
>         if (classic->getReleaseDate() ==
>                 std::to_string(month) + " " + std::to_string(year) &&
>             classic->getMajorActor() == actor) {
170,171c170
<             return false; // No stock available
<           
---
>           return false; // No stock available
186c185
< bool Inventory::ReturnMovie(const std::string& movie_info) {
---
> bool Inventory::ReturnMovie(const std::string &movie_info) {
199c198
<     for (auto& movie : movies_) {
---
>     for (auto &movie : movies_) {
201c200
<         auto*  comedy = static_cast<Comedy*>(movie);
---
>         auto *comedy = static_cast<Comedy *>(movie);
217c216
<     for (auto& movie : movies_) {
---
>     for (auto &movie : movies_) {
219c218
<         auto* drama = static_cast<Drama*>(movie);
---
>         auto *drama = static_cast<Drama *>(movie);
236c235
<     for (auto& movie : movies_) {
---
>     for (auto &movie : movies_) {
238,239c237,240
<         auto* classic = static_cast<Classic*>(movie);
<         if (classic->getReleaseDate() == std::to_string(month) + " " + std::to_string(year) && classic->getMajorActor() == actor) {
---
>         auto *classic = static_cast<Classic *>(movie);
>         if (classic->getReleaseDate() ==
>                 std::to_string(month) + " " + std::to_string(year) &&
>             classic->getMajorActor() == actor) {
Running clang-format on ./main.cpp
7d6
< 
Running clang-format on ./movie.cpp
2d1
< #include <sstream>
3a3
> #include <sstream>
5,7c5,7
< map<char, MovieFactory*>& Movie::getFactories() {
<     static map<char, MovieFactory*> factories;
<     return factories;
---
> map<char, MovieFactory *> &Movie::getFactories() {
>   static map<char, MovieFactory *> factories;
>   return factories;
10,11c10,11
< void Movie::RegisterType(char type, MovieFactory* factory) {
<     getFactories()[type] = factory;
---
> void Movie::RegisterType(char type, MovieFactory *factory) {
>   getFactories()[type] = factory;
14,19c14,19
< Movie* Movie::Create(char type, const string& line) {
<     auto it = getFactories().find(type);
<     if (it != getFactories().end()) {
<         return it->second->Create(line);
<     }
<     throw std::invalid_argument("Invalid movie type");
---
> Movie *Movie::Create(char type, const string &line) {
>   auto it = getFactories().find(type);
>   if (it != getFactories().end()) {
>     return it->second->Create(line);
>   }
>   throw std::invalid_argument("Invalid movie type");
22,28c22,23
< string Movie::getTitle() const { 
<     return title_;
< 
< }
< void Movie::setTitle(const string& title) {
<     this->title_ = title;
< }
---
> string Movie::getTitle() const { return title_; }
> void Movie::setTitle(const string &title) { this->title_ = title; }
33,35c28
< char Movie::getType() const {
<     return genre_;
< }
---
> char Movie::getType() const { return genre_; }
38,42c31,35
<     if (current_stock_ > 0) {
<         current_stock_--;
<         return true;
<     }
<     return false;
---
>   if (current_stock_ > 0) {
>     current_stock_--;
>     return true;
>   }
>   return false;
46,50c39,43
<     if (current_stock_ < stock_) {
<         current_stock_++;
<         return true;
<     }
<     return false;
---
>   if (current_stock_ < stock_) {
>     current_stock_++;
>     return true;
>   }
>   return false;
Running clang-format on ./store.cpp
5,23c5,20
< void Store::ReadCustomers(ifstream& file) {
<     string line;
<     int id;
<     string last_name;
<     string first_name;
< 
<     if (!file.is_open()) {
<         cerr << "Error opening file!" << endl;
<         return;
<     }
< 
<     while (getline(file, line)) {
<         istringstream iss(line);
<         if (!(iss >> id >> last_name >> first_name)) {
<             cerr << "Error reading line: " << line << endl;
<             continue; // Handles lines that do not have exactly three words
<         }
<         Customer customer(id, last_name, first_name);
<         customer_table_.insert(customer);
---
> void Store::ReadCustomers(ifstream &file) {
>   string line;
>   int id;
>   string last_name;
>   string first_name;
> 
>   if (!file.is_open()) {
>     cerr << "Error opening file!" << endl;
>     return;
>   }
> 
>   while (getline(file, line)) {
>     istringstream iss(line);
>     if (!(iss >> id >> last_name >> first_name)) {
>       cerr << "Error reading line: " << line << endl;
>       continue; // Handles lines that do not have exactly three words
25,30c22,25
<     file.close();
< 
< }
< 
< Inventory& Store::inventory(){
<   return inventory_;
---
>     Customer customer(id, last_name, first_name);
>     customer_table_.insert(customer);
>   }
>   file.close();
32a28
> Inventory &Store::inventory() { return inventory_; }
35,37c31,33
<     Movie::RegisterType('F', new ComedyFactory());
<     Movie::RegisterType('D', new DramaFactory());
<     Movie::RegisterType('C', new ClassicFactory());
---
>   Movie::RegisterType('F', new ComedyFactory());
>   Movie::RegisterType('D', new DramaFactory());
>   Movie::RegisterType('C', new ClassicFactory());
40,43c36,50
< void Store::ReadMovies(ifstream& file) {
<     if (!file) {
<         std::cerr << "Could not open the file!" << std::endl;
<         return;
---
> void Store::ReadMovies(ifstream &file) {
>   if (!file) {
>     std::cerr << "Could not open the file!" << std::endl;
>     return;
>   }
> 
>   std::string line;
>   while (getline(file, line)) {
>     if (line.empty())
>       continue;
> 
>     char type = line[0];
>     if (type != 'F' && type != 'D' && type != 'C') {
>       std::cerr << "Invalid movie type: " << type << std::endl;
>       continue;
46,63c53,59
<     std::string line;
<     while (getline(file, line)) {
<         if (line.empty()) continue;
< 
<         char type = line[0];
<         if (type != 'F' && type != 'D' && type != 'C') {
<             std::cerr << "Invalid movie type: " << type << std::endl;
<             continue;
<         }
< 
<         try {
<             auto* movie = Movie::Create(type, line.substr(3));
<             if (movie != nullptr) {
<                 inventory_.AddMovie(*movie, movie->getStock());
<             }
<         } catch (const exception& e) {
<             cerr << "Error parsing line: " << line << "\n" << e.what() << std::endl;
<         }
---
>     try {
>       auto *movie = Movie::Create(type, line.substr(3));
>       if (movie != nullptr) {
>         inventory_.AddMovie(*movie, movie->getStock());
>       }
>     } catch (const exception &e) {
>       cerr << "Error parsing line: " << line << "\n" << e.what() << std::endl;
65,69c61,62
<     cout << endl;
< }
<  
< void Store::PrintCustomers() const{
<   customer_table_.print();
---
>   }
>   cout << endl;
72,132c65,109
< void Store::ReadAndExecuteActions(std::ifstream& in) {
<     std::string line;
<     while (std::getline(in, line)) {
<         std::istringstream iss(line);
<         char command;
<         iss >> command;
< 
<         switch (command) {
<             case 'I': {
<                 inventory().PrintInventory();
<                 break;
<             }
<             case 'H': {
<                 int cusomter_id;
<                 iss >> cusomter_id;
<                 if (customer_table_.search(cusomter_id)) {
<                     Customer* customer = customer_table_.getCustomer(cusomter_id);
<                     cout << endl;
<                     std::cout << "History for customer " << cusomter_id << ":" << std::endl;
<                     cout << endl;
<                     customer->History();
<                 } else {
<                     std::cerr << "Invalid customer ID: " << cusomter_id << std::endl;
<                 }
<                 break;
<                 }
<             case 'B':
<             case 'R': {
<                 int cusomter_id;
<                 char media_type;
<                 iss >> cusomter_id >> media_type;
< 
<                 std::string movie_type;
<                 std::string movie_info;
<                 std::getline(iss >> std::ws, movie_info);
< 
<                 if (customer_table_.search(cusomter_id)) {
<                     Customer* customer = customer_table_.getCustomer(cusomter_id);
<                     bool success;
<                     if (command == 'B') {
<                         success = inventory_.BorrowMovie(movie_info);
<                     } else {
<                         success = inventory_.ReturnMovie(movie_info);
<                     }
< 
<                     if (success) {
<                         std::string action = (command == 'B') ? "Borrowed" : "Returned";
<                         std::string combined = action;
<                         combined.append(": ").append(movie_info);
<                         customer->Add(combined);
<                     } else {
<                         std::cerr << "Error: Could not " << (command == 'B' ? "borrow" : "return") << " movie: " << movie_info << std::endl;
<                     }
<                 } else {
<                     std::cerr << "Error: Customer ID " << cusomter_id << " not found." << std::endl;
<                 }
<                 break;
<             }
<             default:
<                 std::cerr << "Invalid command: " << command << std::endl;
<                 break;
---
> void Store::PrintCustomers() const { customer_table_.print(); }
> 
> void Store::ReadAndExecuteActions(std::ifstream &in) {
>   std::string line;
>   while (std::getline(in, line)) {
>     std::istringstream iss(line);
>     char command;
>     iss >> command;
> 
>     switch (command) {
>     case 'I': {
>       inventory().PrintInventory();
>       break;
>     }
>     case 'H': {
>       int cusomter_id;
>       iss >> cusomter_id;
>       if (customer_table_.search(cusomter_id)) {
>         Customer *customer = customer_table_.getCustomer(cusomter_id);
>         cout << endl;
>         std::cout << "History for customer " << cusomter_id << ":" << std::endl;
>         cout << endl;
>         customer->History();
>       } else {
>         std::cerr << "Invalid customer ID: " << cusomter_id << std::endl;
>       }
>       break;
>     }
>     case 'B':
>     case 'R': {
>       int cusomter_id;
>       char media_type;
>       iss >> cusomter_id >> media_type;
> 
>       std::string movie_type;
>       std::string movie_info;
>       std::getline(iss >> std::ws, movie_info);
> 
>       if (customer_table_.search(cusomter_id)) {
>         Customer *customer = customer_table_.getCustomer(cusomter_id);
>         bool success;
>         if (command == 'B') {
>           success = inventory_.BorrowMovie(movie_info);
>         } else {
>           success = inventory_.ReturnMovie(movie_info);
133a111,130
> 
>         if (success) {
>           std::string action = (command == 'B') ? "Borrowed" : "Returned";
>           std::string combined = action;
>           combined.append(": ").append(movie_info);
>           customer->Add(combined);
>         } else {
>           std::cerr << "Error: Could not "
>                     << (command == 'B' ? "borrow" : "return")
>                     << " movie: " << movie_info << std::endl;
>         }
>       } else {
>         std::cerr << "Error: Customer ID " << cusomter_id << " not found."
>                   << std::endl;
>       }
>       break;
>     }
>     default:
>       std::cerr << "Invalid command: " << command << std::endl;
>       break;
134a132
>   }
Running clang-format on ./store_test.cpp
8,11c8,10
< #include <iostream>
< #include <fstream>
< #include <string>
< #include <vector>
---
> #include "inventory.h"
> #include "movie.h"
> #include "store.h"
12a12
> #include <cassert>
14d13
< #include <ctime>
16,20c15,19
< #include <cassert>
< #include "store.h"
< #include "movie.h"
< #include "inventory.h"
< 
---
> #include <ctime>
> #include <fstream>
> #include <iostream>
> #include <string>
> #include <vector>
43,48c42,47
<     // this test function tests movie being
<     // inserted into inventory and sorted per the requirement.
<     Store store;
<     ifstream movie_file("data4movies.txt");
<     store.ReadMovies(movie_file);
<     store.inventory().PrintInventory();
---
>   // this test function tests movie being
>   // inserted into inventory and sorted per the requirement.
>   Store store;
>   ifstream movie_file("data4movies.txt");
>   store.ReadMovies(movie_file);
>   store.inventory().PrintInventory();
58d56
< 
61c59
<   // this test function tests command are read and executesd. 
---
>   // this test function tests command are read and executesd.
87,89c85,87
<   //testStore2();
<   //testStore3();
<   //testStore4();
---
>   // testStore2();
>   // testStore3();
>   // testStore4();
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==3803680== Memcheck, a memory error detector
==3803680== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==3803680== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==3803680== Command: ./a.out
==3803680== Parent PID: 3803527
==3803680== 
==3803680== Invalid read of size 8
==3803680==    at 0x4F78D6B: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib64/libstdc++.so.6.0.25)
==3803680==    by 0x403CE1: Classic::Classic(Classic const&) (movie.h:99)
==3803680==    by 0x4031CC: Classic::operator==(Movie const&) const (classic.cpp:35)
==3803680==    by 0x407C4C: Inventory::AddMovieHelper(Movie*, int) (inventory.cpp:5)
==3803680==    by 0x407D2A: Inventory::AddMovie(Movie const&, int) (inventory.cpp:16)
==3803680==    by 0x40F92F: Store::ReadMovies(std::basic_ifstream<char, std::char_traits<char> >&) (store.cpp:59)
==3803680==    by 0x410A8C: testStoreFinal() (store_test.cpp:76)
==3803680==    by 0x410BC6: testAll() (store_test.cpp:90)
==3803680==    by 0x40D9D1: main (main.cpp:12)
==3803680==  Address 0x5b55db8 is 0 bytes after a block of size 120 alloc'd
==3803680==    at 0x4C38913: operator new(unsigned long) (vg_replace_malloc.c:472)
==3803680==    by 0x404B4F: ComedyFactory::Create(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (comedy.cpp:72)
==3803680==    by 0x40DB4C: Movie::Create(char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (movie.cpp:17)
==3803680==    by 0x407D04: Inventory::AddMovie(Movie const&, int) (inventory.cpp:15)
==3803680==    by 0x40F92F: Store::ReadMovies(std::basic_ifstream<char, std::char_traits<char> >&) (store.cpp:59)
==3803680==    by 0x410A8C: testStoreFinal() (store_test.cpp:76)
==3803680==    by 0x410BC6: testAll() (store_test.cpp:90)
==3803680==    by 0x40D9D1: main (main.cpp:12)
==3803680== 
==3803680== Invalid read of size 8
==3803680==    at 0x4F78D6E: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib64/libstdc++.so.6.0.25)
==3803680==    by 0x403CE1: Classic::Classic(Classic const&) (movie.h:99)
==3803680==    by 0x4031CC: Classic::operator==(Movie const&) const (classic.cpp:35)
==3803680==    by 0x407C4C: Inventory::AddMovieHelper(Movie*, int) (inventory.cpp:5)
==3803680==    by 0x407D2A: Inventory::AddMovie(Movie const&, int) (inventory.cpp:16)
==3803680==    by 0x40F92F: Store::ReadMovies(std::basic_ifstream<char, std::char_traits<char> >&) (store.cpp:59)
==3803680==    by 0x410A8C: testStoreFinal() (store_test.cpp:76)
==3803680==    by 0x410BC6: testAll() (store_test.cpp:90)
==3803680==    by 0x40D9D1: main (main.cpp:12)
==3803680==  Address 0x5b55dc0 is 8 bytes after a block of size 120 alloc'd
==3803680==    at 0x4C38913: operator new(unsigned long) (vg_replace_malloc.c:472)
==3803680==    by 0x404B4F: ComedyFactory::Create(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (comedy.cpp:72)
==3803680==    by 0x40DB4C: Movie::Create(char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (movie.cpp:17)
==3803680==    by 0x407D04: Inventory::AddMovie(Movie const&, int) (inventory.cpp:15)
==3803680==    by 0x40F92F: Store::ReadMovies(std::basic_ifstream<char, std::char_traits<char> >&) (store.cpp:59)
==3803680==    by 0x410A8C: testStoreFinal() (store_test.cpp:76)
==3803680==    by 0x410BC6: testAll() (store_test.cpp:90)
==3803680==    by 0x40D9D1: main (main.cpp:12)
==3803680== 
==3803680== 
==3803680== HEAP SUMMARY:
==3803680==     in use at exit: 9,600 bytes in 113 blocks
==3803680==   total heap usage: 1,142 allocs, 1,029 frees, 154,212 bytes allocated
==3803680== 
==3803680== LEAK SUMMARY:
==3803680==    definitely lost: 8,120 bytes in 63 blocks
==3803680==    indirectly lost: 1,480 bytes in 50 blocks
==3803680==      possibly lost: 0 bytes in 0 blocks
==3803680==    still reachable: 0 bytes in 0 blocks
==3803680==         suppressed: 0 bytes in 0 blocks
==3803680== Rerun with --leak-check=full to see details of leaked memory
==3803680== 
==3803680== For lists of detected and suppressed errors, rerun with: -s
==3803680== ERROR SUMMARY: 162 errors from 2 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
File '/home/NETID/jeosburn/css343/lab4/classic.cpp':
Name                                                                                                                                                                                                                                                                                                                                                                                Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Classic::Classic(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)         1       0 100.00%         7       0 100.00%         0       0   0.00%
Classic::operator<(Movie const&) const                                                                                                                                                                                                                                                                                                                                                    9       9   0.00%        20      20   0.00%         6       6   0.00%
Classic::operator==(Movie const&) const                                                                                                                                                                                                                                                                                                                                                   3       0 100.00%         4       0 100.00%         4       1  75.00%
Classic::Print(std::ostream&) const                                                                                                                                                                                                                                                                                                                                                       1       0 100.00%         9       0 100.00%         0       0   0.00%
Classic::ToString[abi:cxx11]() const                                                                                                                                                                                                                                                                                                                                                      1       0 100.00%         3       0 100.00%         0       0   0.00%
Classic::getReleaseDate[abi:cxx11]() const                                                                                                                                                                                                                                                                                                                                                1       0 100.00%         3       0 100.00%         0       0   0.00%
Classic::setReleaseDate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)                                                                                                                                                                                                                                                                            1       1   0.00%         3       3   0.00%         0       0   0.00%
Classic::getMajorActor[abi:cxx11]() const                                                                                                                                                                                                                                                                                                                                                 1       0 100.00%         3       0 100.00%         0       0   0.00%
Classic::setMajorActor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)                                                                                                                                                                                                                                                                             1       1   0.00%         3       3   0.00%         0       0   0.00%
ClassicFactory::Create(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) const                                                                                                                                                                                                                                                                       1       0 100.00%        20       0 100.00%         0       0   0.00%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                                                                                                                                    20      11  45.00%        75      26  65.33%        10       7  30.00%

File '/home/NETID/jeosburn/css343/lab4/comedy.cpp':
Name                                                                                                                                                                                                                                                                                                                                                                                Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Comedy::Comedy(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, int)                                                                                                                                                                                    1       0 100.00%         7       0 100.00%         0       0   0.00%
Comedy::operator<(Movie const&) const                                                                                                                                                                                                                                                                                                                                                     4       4   0.00%         7       7   0.00%         2       2   0.00%
Comedy::operator==(Movie const&) const                                                                                                                                                                                                                                                                                                                                                    3       1  66.67%         4       0 100.00%         4       3  25.00%
Comedy::Print(std::ostream&) const                                                                                                                                                                                                                                                                                                                                                        1       0 100.00%         8       0 100.00%         0       0   0.00%
Comedy::ToString[abi:cxx11]() const                                                                                                                                                                                                                                                                                                                                                       1       0 100.00%         3       0 100.00%         0       0   0.00%
Comedy::getReleaseYear() const                                                                                                                                                                                                                                                                                                                                                            1       0 100.00%         3       0 100.00%         0       0   0.00%
Comedy::setReleaseYear(int)                                                                                                                                                                                                                                                                                                                                                               1       1   0.00%         3       3   0.00%         0       0   0.00%
Comedy::getDirector[abi:cxx11]() const                                                                                                                                                                                                                                                                                                                                                    1       1   0.00%         3       3   0.00%         0       0   0.00%
Comedy::setDirector(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)                                                                                                                                                                                                                                                                                1       1   0.00%         3       3   0.00%         0       0   0.00%
ComedyFactory::Create(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) const                                                                                                                                                                                                                                                                        1       0 100.00%        15       0 100.00%         0       0   0.00%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                                                                                                                                    15       8  46.67%        56      16  71.43%         6       5  16.67%

File '/home/NETID/jeosburn/css343/lab4/customer.cpp':
Name                                                                                                                                                                                                                                                                                                                                                                                Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Customer::Customer()                                                                                                                                                                                                                                                                                                                                                                      1       0 100.00%         1       0 100.00%         0       0   0.00%
Customer::Customer(int&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&)                                                                                                                                                                                                1       0 100.00%         1       0 100.00%         0       0   0.00%
Customer::ID() const                                                                                                                                                                                                                                                                                                                                                                      1       0 100.00%         3       0 100.00%         0       0   0.00%
Customer::LastName[abi:cxx11]() const                                                                                                                                                                                                                                                                                                                                                     1       1   0.00%         3       3   0.00%         0       0   0.00%
Customer::FirstName[abi:cxx11]() const                                                                                                                                                                                                                                                                                                                                                    1       1   0.00%         3       3   0.00%         0       0   0.00%
Customer::SetID(int)                                                                                                                                                                                                                                                                                                                                                                      1       1   0.00%         3       3   0.00%         0       0   0.00%
Customer::SetLastName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>)                                                                                                                                                                                                                                                                                     1       1   0.00%         3       3   0.00%         0       0   0.00%
Customer::SetFirstName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>)                                                                                                                                                                                                                                                                                    1       1   0.00%         3       3   0.00%         0       0   0.00%
Customer::Add(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>)                                                                                                                                                                                                                                                                                             1       0 100.00%         4       0 100.00%         0       0   0.00%
Customer::History() const                                                                                                                                                                                                                                                                                                                                                                 7       0 100.00%         9       0 100.00%         4       0 100.00%
Customer::operator==(Customer const&) const                                                                                                                                                                                                                                                                                                                                               5       5   0.00%         3       3   0.00%         6       6   0.00%
operator<<(std::ostream&, Customer const&)                                                                                                                                                                                                                                                                                                                                                1       1   0.00%         5       5   0.00%         0       0   0.00%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                                                                                                                                    22      11  50.00%        41      23  43.90%        10       6  40.00%

File '/home/NETID/jeosburn/css343/lab4/customerHashTable.cpp':
Name                                                                                                                                                                                                                                                                                                                                                                                Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CustomerHashTable::CustomerHashTable()                                                                                                                                                                                                                                                                                                                                                    4       0 100.00%         7       0 100.00%         2       0 100.00%
CustomerHashTable::~CustomerHashTable()                                                                                                                                                                                                                                                                                                                                                   1       0 100.00%         4       0 100.00%         0       0   0.00%
CustomerHashTable::hashFunction(int)                                                                                                                                                                                                                                                                                                                                                      1       0 100.00%         3       0 100.00%         0       0   0.00%
CustomerHashTable::probe(int, int)                                                                                                                                                                                                                                                                                                                                                        1       0 100.00%         3       0 100.00%         0       0   0.00%
CustomerHashTable::insert(Customer)                                                                                                                                                                                                                                                                                                                                                       7       1  85.71%        11       1  90.91%         4       1  75.00%
CustomerHashTable::search(int) const                                                                                                                                                                                                                                                                                                                                                      9       0 100.00%         9       0 100.00%         6       0 100.00%
CustomerHashTable::print() const                                                                                                                                                                                                                                                                                                                                                          6       6   0.00%         8       8   0.00%         4       4   0.00%
CustomerHashTable::remove(Customer)                                                                                                                                                                                                                                                                                                                                                       9       9   0.00%        10      10   0.00%         6       6   0.00%
CustomerHashTable::getCustomer(int)                                                                                                                                                                                                                                                                                                                                                       9       1  88.89%         9       1  88.89%         6       2  66.67%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                                                                                                                                    47      17  63.83%        64      20  68.75%        28      13  53.57%

File '/home/NETID/jeosburn/css343/lab4/drama.cpp':
Name                                                                                                                                                                                                                                                                                                                                                                                Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Drama::Drama(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, int, int)                                                                                                                                                                                      1       0 100.00%         7       0 100.00%         0       0   0.00%
Drama::operator<(Movie const&) const                                                                                                                                                                                                                                                                                                                                                      4       4   0.00%         7       7   0.00%         2       2   0.00%
Drama::operator==(Movie const&) const                                                                                                                                                                                                                                                                                                                                                     3       1  66.67%         4       0 100.00%         4       3  25.00%
Drama::Print(std::ostream&) const                                                                                                                                                                                                                                                                                                                                                         1       0 100.00%         8       0 100.00%         0       0   0.00%
Drama::ToString[abi:cxx11]() const                                                                                                                                                                                                                                                                                                                                                        1       0 100.00%         3       0 100.00%         0       0   0.00%
Drama::getReleaseYear() const                                                                                                                                                                                                                                                                                                                                                             1       1   0.00%         3       3   0.00%         0       0   0.00%
Drama::setReleaseYear(int)                                                                                                                                                                                                                                                                                                                                                                1       1   0.00%         3       3   0.00%         0       0   0.00%
Drama::getDirector[abi:cxx11]() const                                                                                                                                                                                                                                                                                                                                                     1       0 100.00%         3       0 100.00%         0       0   0.00%
Drama::setDirector(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)                                                                                                                                                                                                                                                                                 1       1   0.00%         3       3   0.00%         0       0   0.00%
DramaFactory::Create(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) const                                                                                                                                                                                                                                                                         1       0 100.00%        15       0 100.00%         0       0   0.00%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                                                                                                                                    15       8  46.67%        56      16  71.43%         6       5  16.67%

File '/home/NETID/jeosburn/css343/lab4/inventory.cpp':
Name                                                                                                                                                                                                                                                                                                                                                                                Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Inventory::AddMovieHelper(Movie*, int)                                                                                                                                                                                                                                                                                                                                                    5       1  80.00%        10       3  70.00%         4       1  75.00%
Inventory::AddMovie(Movie const&, int)                                                                                                                                                                                                                                                                                                                                                    1       0 100.00%         4       0 100.00%         0       0   0.00%
Inventory::PrintInventory() const                                                                                                                                                                                                                                                                                                                                                        10       0 100.00%        73       0 100.00%        12       0 100.00%
Inventory::BorrowMovie(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)                                                                                                                                                                                                                                                                            39       6  84.62%        73       8  89.04%        44       7  84.09%
Inventory::ReturnMovie(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)                                                                                                                                                                                                                                                                            30      13  56.67%        64      24  62.50%        38      16  57.89%
inventory.cpp:Inventory::PrintInventory() const::$_0::operator()(Movie*, Movie*) const                                                                                                                                                                                                                                                                                                    9       1  88.89%        11       1  90.91%         6       1  83.33%
inventory.cpp:Inventory::PrintInventory() const::$_1::operator()(Movie*, Movie*) const                                                                                                                                                                                                                                                                                                    9       1  88.89%        11       1  90.91%         6       1  83.33%
inventory.cpp:Inventory::PrintInventory() const::$_2::operator()(Movie*, Movie*) const                                                                                                                                                                                                                                                                                                   12       0 100.00%        22       0 100.00%         8       0 100.00%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                                                                                                                                   115      22  80.87%       268      37  86.19%       118      26  77.97%

File '/home/NETID/jeosburn/css343/lab4/main.cpp':
Name                                                                                                                                                                                                                                                                                                                                                                                Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
main                                                                                                                                                                                                                                                                                                                                                                                      1       0 100.00%         5       0 100.00%         0       0   0.00%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                                                                                                                                     1       0 100.00%         5       0 100.00%         0       0   0.00%

File '/home/NETID/jeosburn/css343/lab4/movie.cpp':
Name                                                                                                                                                                                                                                                                                                                                                                                Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Movie::getFactories()                                                                                                                                                                                                                                                                                                                                                                     1       0 100.00%         4       0 100.00%         0       0   0.00%
Movie::RegisterType(char, MovieFactory*)                                                                                                                                                                                                                                                                                                                                                  1       0 100.00%         3       0 100.00%         0       0   0.00%
Movie::Create(char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)                                                                                                                                                                                                                                                                                4       1  75.00%         7       1  85.71%         2       1  50.00%
Movie::getTitle[abi:cxx11]() const                                                                                                                                                                                                                                                                                                                                                        1       0 100.00%         3       0 100.00%         0       0   0.00%
Movie::setTitle(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)                                                                                                                                                                                                                                                                                    1       1   0.00%         3       3   0.00%         0       0   0.00%
Movie::getStock() const                                                                                                                                                                                                                                                                                                                                                                   1       0 100.00%         1       0 100.00%         0       0   0.00%
Movie::setStock(int)                                                                                                                                                                                                                                                                                                                                                                      1       0 100.00%         1       0 100.00%         0       0   0.00%
Movie::getType() const                                                                                                                                                                                                                                                                                                                                                                    1       0 100.00%         3       0 100.00%         0       0   0.00%
Movie::Borrow()                                                                                                                                                                                                                                                                                                                                                                           4       4   0.00%         7       7   0.00%         2       2   0.00%
Movie::ReturnItem()                                                                                                                                                                                                                                                                                                                                                                       4       4   0.00%         7       7   0.00%         2       2   0.00%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                                                                                                                                    19      10  47.37%        39      18  53.85%         6       5  16.67%

File '/home/NETID/jeosburn/css343/lab4/store.cpp':
Name                                                                                                                                                                                                                                                                                                                                                                                Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Store::ReadCustomers(std::basic_ifstream<char, std::char_traits<char>>&)                                                                                                                                                                                                                                                                                                                  9       2  77.78%        20       6  70.00%         6       2  66.67%
Store::inventory()                                                                                                                                                                                                                                                                                                                                                                        1       0 100.00%         3       0 100.00%         0       0   0.00%
Store::Store()                                                                                                                                                                                                                                                                                                                                                                            1       0 100.00%         5       0 100.00%         0       0   0.00%
Store::ReadMovies(std::basic_ifstream<char, std::char_traits<char>>&)                                                                                                                                                                                                                                                                                                                    21       2  90.48%        24       3  87.50%        14       3  78.57%
Store::PrintCustomers() const                                                                                                                                                                                                                                                                                                                                                             1       1   0.00%         3       3   0.00%         0       0   0.00%
Store::ReadAndExecuteActions(std::basic_ifstream<char, std::char_traits<char>>&)                                                                                                                                                                                                                                                                                                         26       2  92.31%        60       4  93.33%        24       2  91.67%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                                                                                                                                    59       7  88.14%       115      16  86.09%        44       7  84.09%

File '/home/NETID/jeosburn/css343/lab4/store_test.cpp':
Name                                                                                                                                                                                                                                                                                                                                                                                Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
testStore1()                                                                                                                                                                                                                                                                                                                                                                              3       3   0.00%        17      17   0.00%         2       2   0.00%
testStore2()                                                                                                                                                                                                                                                                                                                                                                              1       1   0.00%         6       6   0.00%         0       0   0.00%
testStore3()                                                                                                                                                                                                                                                                                                                                                                              1       1   0.00%         6       6   0.00%         0       0   0.00%
testStore4()                                                                                                                                                                                                                                                                                                                                                                              1       1   0.00%         9       9   0.00%         0       0   0.00%
testStoreFinal()                                                                                                                                                                                                                                                                                                                                                                          1       0 100.00%        13       0 100.00%         0       0   0.00%
testAll()                                                                                                                                                                                                                                                                                                                                                                                 1       0 100.00%         3       0 100.00%         0       0   0.00%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                                                                                                                                     8       6  25.00%        54      38  29.63%         2       2   0.00%
=====================================================
The lines below were never executed
=====================================================
   13|      0|bool Classic::operator<(const Movie& other) const {
   14|      0|    const auto classic = static_cast<const Classic&>(other);
   15|      0|    if (release_date_ != classic.release_date_) {
   16|      0|        istringstream ssa(release_date_);
   17|      0|        istringstream ssb(classic.release_date_);
   18|      0|        int month_a;
   19|      0|        int year_a;
   20|      0|        int month_b;
   21|      0|        int year_b;
   22|      0|        ssa >> month_a >> year_a;
   23|      0|        ssb >> month_b >> year_b;
   24|      0|        if (year_a != year_b) {
   25|      0|            return year_a < year_b;
   26|      0|        }
   27|      0|        if (month_a != month_b) {
   28|      0|            return month_a < month_b;
   29|      0|        }
   30|      0|    }
   31|      0|    return major_actor_ < classic.major_actor_;
   32|      0|}
   57|      0|void Classic::setReleaseDate(const string& date) {
   58|      0|    release_date_ = date;
   59|      0|}
   65|      0|void Classic::setMajorActor(const string& actor) {
   66|      0|    major_actor_ = actor;
   67|      0|}
   14|      0|bool Comedy::operator<(const Movie& other) const {
   15|      0|    const auto comedy = static_cast<const Comedy&>(other);
   16|      0|    if (title_ != comedy.title_) {
   17|      0|        return title_ < comedy.title_;
   18|      0|    }
   19|      0|    return release_year_ < comedy.release_year_;
   20|      0|}
   45|      0|void Comedy::setReleaseYear(int year) {
   46|      0|    release_year_ = year;
   47|      0|}
   49|      0|string Comedy::getDirector() const {
   50|      0|    return director_;
   51|      0|}
   53|      0|void Comedy::setDirector(const string& director) {
   54|      0|    this->director_ = director;
   55|      0|}
   15|      0|string Customer::LastName() const {
   16|      0|    return last_name_;
   17|      0|}
   19|      0|string Customer::FirstName() const {
   20|      0|    return first_name_;
   21|      0|}
   23|      0|void Customer::SetID(int id) {
   24|      0|    id_ = id;
   25|      0|}
   27|      0|void Customer::SetLastName(string last_name) {
   28|      0|    last_name_ = last_name;
   29|      0|}
   31|      0|void Customer::SetFirstName(string first_name) {
   32|      0|    first_name_ = first_name;
   33|      0|}
   54|      0|bool Customer::operator==(const Customer &customer) const {
   55|      0|    return id_ == customer.id_ && last_name_ == customer.last_name_ && first_name_ == customer.first_name_;
   56|      0|}
   58|      0|ostream& operator<<(ostream& os, const Customer& customer) {
   59|      0|  os << "Customer ID: " << customer.ID()
   60|      0|     << ", Name: " << customer.FirstName() << " " << customer.LastName();
   61|      0|  return os;
   62|      0|}
   35|      0|    return false; // table is full
   48|      0|void CustomerHashTable::print() const{
   49|      0|    for (int i = 0; i < TABLE_SIZE; i++) {
   50|      0|        if (!table[i].FirstName().empty()) {
   51|      0|            cout << "at index " << i << ": " << table[i] << endl;;
   52|      0|        }
   54|      0|    }
   55|      0|    cout << endl;
   56|      0|}
   58|      0|bool CustomerHashTable::remove(Customer customer) {
   59|      0|    for (int i = 0; i < TABLE_SIZE; i++) {
   60|      0|        int idx = probe(customer.ID(), i);
   61|      0|        if (occupied[idx] && table[idx] == customer) {
   62|      0|            occupied[idx] = false;
   63|      0|            return true; // key removed
   64|      0|        }
   65|      0|    }
   66|      0|    return false; // key not found after full probing
   67|      0|}
   76|      0|  return nullptr;  // Full cycle and not found
   13|      0|bool Drama::operator<(const Movie& other) const {
   14|      0|    const auto drama = static_cast<const Drama&>(other);
   15|      0|    if (director_ != drama.director_) {
   16|      0|        return director_ < drama.director_;
   17|      0|    }
   18|      0|    return title_ < drama.title_;
   19|      0|}
   39|      0|int Drama::getReleaseYear() const {
   40|      0|    return release_year_;
   41|      0|}
   43|      0|void Drama::setReleaseYear(int year) {
   44|      0|    release_year_ = year;
   45|      0|}
   51|      0|void Drama::setDirector(const string& director) {
   52|      0|    this->director_ = director;
   53|      0|}
    6|      0|            m->setStock(m->getStock() + count);
    7|      0|            return;
    8|      0|        }
   30|      0|            return ca->getReleaseYear() < cb->getReleaseYear();
   55|      0|            return da->getTitle() < db->getTitle();
  125|      0|            return false; // No stock available
  143|      0|          if (drama->getStock() > 0) {
  144|      0|            drama->setStock(drama->getStock() - 1);
  145|      0|            return true; // Successfully borrowed
  146|      0|          }
  147|      0|            return false; // No stock available
  149|      0|        }
  175|      0|    break;
  208|      0|    break;
  210|      0|  case 'D': {
  211|      0|    std::string director;
  212|      0|    std::string title;
  213|      0|    iss.ignore(1, ' '); // Skip the space after type
  214|      0|    std::getline(iss, director, ',');
  215|      0|    std::getline(iss, title);
  217|      0|    for (auto& movie : movies_) {
  218|      0|      if (movie->getType() == 'D') {
  219|      0|        auto* drama = static_cast<Drama*>(movie);
  220|      0|        if (drama->getDirector() == director && drama->getTitle() == title) {
  221|      0|          drama->setStock(drama->getStock() + 1);
  222|      0|          return true; // Successfully returned
  223|      0|        }
  224|      0|      }
  225|      0|    }
  226|      0|    break;
  227|      0|  }
  245|      0|    break;
  247|      0|  default:
  248|      0|    std::cerr << "Invalid movie type: " << movie_type << std::endl;
  249|      0|    return false;
  252|      0|  std::cerr << "Movie not found: " << movie_info << std::endl;
  253|      0|  return false;
   19|      0|    throw std::invalid_argument("Invalid movie type");
   26|      0|void Movie::setTitle(const string& title) {
   27|      0|    this->title_ = title;
   28|      0|}
   37|      0|bool Movie::Borrow() {
   38|      0|    if (current_stock_ > 0) {
   39|      0|        current_stock_--;
   40|      0|        return true;
   41|      0|    }
   42|      0|    return false;
   43|      0|}
   45|      0|bool Movie::ReturnItem() {
   46|      0|    if (current_stock_ < stock_) {
   47|      0|        current_stock_++;
   48|      0|        return true;
   49|      0|    }
   50|      0|    return false;
   51|      0|}
   17|      0|    virtual ~MovieFactory() = default;
   12|      0|        cerr << "Error opening file!" << endl;
   13|      0|        return;
   14|      0|    }
   19|      0|            cerr << "Error reading line: " << line << endl;
   20|      0|            continue; // Handles lines that do not have exactly three words
   21|      0|        }
   42|      0|        std::cerr << "Could not open the file!" << std::endl;
   43|      0|        return;
   44|      0|    }
   68|      0|void Store::PrintCustomers() const{
   69|      0|  customer_table_.print();
   70|      0|}
   83|      0|            }
   94|      0|                    std::cerr << "Invalid customer ID: " << cusomter_id << std::endl;
   95|      0|                }
   97|      0|                }
   22|      0|void testStore1() {
   23|      0|  cout << "Start testStore1" << endl;
   26|      0|  string cfile = "testcommands-1.txt";
   27|      0|  stringstream out;
   28|      0|  ifstream fs(cfile);
   29|      0|  assert(fs.is_open());
   30|      0|  char command_type;
   31|      0|  string discard;
   32|      0|  while (fs >> command_type) {
   33|      0|    out << command_type;
   34|      0|    getline(fs, discard);
   35|      0|  }
   36|      0|  fs.close();
   37|      0|  string result = "IHHBRIBBIH";
   38|      0|  assert(out.str() == result);
   39|      0|  cout << "End testStore1" << endl;
   40|      0|}
   42|      0|void testStore2() {
   45|      0|    Store store;
   46|      0|    ifstream movie_file("data4movies.txt");
   47|      0|    store.ReadMovies(movie_file);
   48|      0|    store.inventory().PrintInventory();
   49|      0|}
   51|      0|void testStore3() {
   54|      0|  Store store;
   55|      0|  ifstream stream("data4customers.txt");
   56|      0|  store.ReadCustomers(stream);
   57|      0|  store.PrintCustomers();
   59|      0|}
   60|      0|void testStore4() {
   62|      0|  Store store;
   63|      0|  ifstream movie_file("data4movies.txt");
   64|      0|  store.ReadMovies(movie_file);
   65|      0|  ifstream customerfile("data4customers.txt");
   66|      0|  store.ReadCustomers(customerfile);
   67|      0|  ifstream commandfile("testCommandtext.txt");
   68|      0|  store.ReadAndExecuteActions(commandfile);
   69|      0|}
Mon May 27 01:45:22 PDT 2024
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
